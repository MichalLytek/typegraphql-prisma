// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`models should properly generate object type class for prisma model when simpleResolvers option is enabled: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  simpleResolvers: true
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  balance?: number | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with descriptions: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Post } from \\"../models/Post\\";

/** User model doc */
@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: \\"User model doc\\"
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  /** field doc */
  @TypeGraphQL.Field(_type => String, {
    nullable: false,
    description: \\"field doc\\"
  })
  stringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intField!: number;

  /** relation doc */
  posts?: Post[];
}
"
`;

exports[`models should properly generate object type class for prisma model with different scalar fields types: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  stringField!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  optionalStringField?: string | null;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: false
  })
  booleanField!: boolean;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false
  })
  dateField!: Date;

  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
    nullable: false
  })
  jsonField!: Prisma.JsonValue;
}
"
`;

exports[`models should properly generate object type class for prisma model with enum and alias fields types: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Sample } from \\"../enums/Sample\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  intIdField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  aliasField!: number;

  @TypeGraphQL.Field(_type => Sample, {
    nullable: false
  })
  enumField!: \\"SAMPLE\\";
}
"
`;

exports[`models should properly generate object type class for prisma model with native types: NativeTypeModel 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class NativeTypeModel {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  @TypeGraphQL.Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  bigInt?: bigint | null;

  @TypeGraphQL.Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  byteA?: Buffer | null;

  @TypeGraphQL.Field(_type => DecimalJSScalar, {
    nullable: true
  })
  decimal?: Prisma.Decimal | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with omitted field: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  name!: string;

  balance?: number | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with renamed fields: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Post } from \\"../models/Post\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  /** renamed field docs */
  name!: string;

  balance!: number | null;

  posts?: Post[];

  /** renamed field docs */
  @TypeGraphQL.Field(_type => String, {
    nullable: false,
    description: \\"renamed field docs\\"
  })
  get firstName(): string {
    return this.name;
  }

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  get accountBalance(): number | null {
    return this.balance ?? null;
  }
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations when models are renamed: Article 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Client } from \\"../models/Client\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class Article {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  author?: Client;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations when models are renamed: Client 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Article } from \\"../models/Article\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class Client {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  posts?: Article[];
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: Post 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { User } from \\"../models/User\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class Post {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  author?: User;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Post } from \\"../models/Post\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  posts?: Post[];
}
"
`;

exports[`models should properly generate object type classes for prisma models with self relations: Service 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class Service {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  id!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  name!: string;

  sourceService?: Service | null;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  sourceId?: number | null;

  services?: Service[];
}
"
`;

exports[`models when noResolvers is enabled should generate model object type class without _count field: FirstModel 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { SecondModel } from \\"../models/SecondModel\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class FirstModel {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  idField!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  secondModelsField?: SecondModel[];
}
"
`;

exports[`models when selectRelationCount preview feature is enabled should properly generate model object type class: FirstModel 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { SecondModel } from \\"../models/SecondModel\\";
import { FirstModelCount } from \\"../resolvers/outputs/FirstModelCount\\";

@TypeGraphQL.ObjectType({
  isAbstract: true
})
export class FirstModel {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false
  })
  idField!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  secondModelsField?: SecondModel[];

  @TypeGraphQL.Field(_type => FirstModelCount, {
    nullable: true
  })
  _count?: FirstModelCount | null;
}
"
`;
